<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="typeNpc">
	<resultMap id="typeRstMap" type="type">
		<id property="id" column="id" />
		<result property="name" column="name" />
		<result property="color" column="color" />
		<result property="seotitle" column="seotitle" />
		<result property="keyword" column="keyword" />
		<result property="description" column="description" />
		<result property="topid" column="topid" />
		<result property="sort" column="sort" />
		<result property="price" column="price" />
		<collection property="sites" javaType="java.util.ArrayList" ofType="site" select="siteNpc.queryByTypeId" column="id" />
	</resultMap>

	<sql id="query_where">
		<where>
			<if test="type != null">
				<if test="type.topid != null">
					and T.topid = #{type.topid}
				</if>
				<if test="type.id != null and type.id != ''">
					and T.id = #{type.id}
				</if>
				<if test="type.name != null and type.name != ''">
					and T.name = #{type.name}
				</if>
				<if test="type.price != null and type.price != ''">
					and T.price = #{type.price}
				</if>
			</if>
			<if test="siteId != null and siteId != ''">
				and TS.siteId = #{siteId}
			</if>
		</where>
	</sql>

	<select id="queryByShopId" resultMap="typeRstMap" parameterType="string">
		SELECT T.* FROM TYPE T
		join SHOPTYPE ST on ST.typeId = T.id
		where ST.shopId = #{id}
		order by T.sort asc, T.name asc
	</select>

	<select id="queryDistinct" resultMap="typeRstMap" parameterType="map">
		SELECT distinct 
		name, topid, min(id) id,
		'' color,'' seotitle, '' keyword, 
		'' description, '' sort, '' price
		FROM TYPE T
		left join TYPESITE TS on TS.typeId = T.id
		<include refid="query_where" />
		group by name
		order by T.sort asc, T.name asc
	</select>
	
	<select id="query" resultMap="typeRstMap" parameterType="map">
		SELECT distinct T.* FROM TYPE T
		left join TYPESITE TS on TS.typeId = T.id
		<include refid="query_where" />
		order by T.sort asc, T.name asc
	</select>
	
	<select id="querySecondNodes" resultMap="typeRstMap">
		select t2.* from `type` t1
		join `type` t2 on t2.topid = t1.id
		where t1.topid=0
	</select>
	
	<insert id="add" parameterType="type">
		<selectKey resultType="java.lang.String" keyProperty="id" order="AFTER" >
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT INTO TYPE(
			name, seotitle, keyword,
			description, color, topid,
			sort, price
		) VALUES (
			#{name}, #{seotitle}, #{keyword},
			#{description}, #{color}, #{topid},
			#{sort}, #{price}
		)
	</insert>
	
	<insert id="addSites" parameterType="type">
		INSERT INTO TYPESITE (
			typeId, siteId
		) VALUES 
		<foreach collection="sites" item="site" index="index" separator=",">
		(
			#{id}, #{site.id}
		)
		</foreach>
	</insert>
	
	<update id="update" parameterType="type">
		update TYPE set
			name = #{name},
			seotitle = #{seotitle},
			keyword = #{keyword},
			description = #{description},
			color = #{color},
			topid = #{topid},
			sort = #{sort},
			price = #{price}
			
			WHERE id = #{id}
	</update>
	
	<delete id="delete" parameterType="type">
		delete from TYPE where id = #{id}
	</delete>
	
	<delete id="deleteSites" parameterType="map">
		delete from TYPESITE where typeId = #{type.id}
		<if test="siteIds != null and siteIds != ''">
			and siteId in (${siteIds})
		</if>
	</delete>
</mapper>
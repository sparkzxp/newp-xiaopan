<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="shopNpc">
	<resultMap id="shopRstMap" type="shop">
		<id property="id" column="id" />
		<result property="title" column="title" />
		<result property="keyword" column="keyword" />
		<result property="description" column="description" />
		<result property="contents" column="contents" />
		<result property="address" column="address" />
		<result property="tel" column="tel" />
		<result property="contacter" column="contacter" />
		<result property="imagePath" column="imagePath" />
		<result property="siteId" column="siteId" />
		<result property="siteName" column="siteName" />
		<result property="click" column="click" />
		<result property="pingnum" column="pingnum" />
		<result property="isClosed" column="isClosed" />
		<collection property="types" javaType="java.util.ArrayList" ofType="type" select="typeNpc.queryByShopId" column="id" />
	</resultMap>

	<sql id="query_where">
		<where>
			<if test="shop != null">
				<if test="shop.id != null and shop.id != ''">
					and s.id = #{shop.id}
				</if>
				<if test="shop.siteId != null and shop.siteId != ''">
					and s.siteId = #{shop.siteId}
				</if>
			</if>
			<if test="type != null">
				<if test="type.name != null and type.name != ''">
					and (t.name like '%${type.name}%'
					or s.title like '%${type.name}%')
				</if>
			</if>
			<if test="siteId != null and siteId != ''">
				and s.siteId = #{siteId}
			</if>
		</where>
	</sql>
	<sql id="order">
		ORDER BY s.siteId asc, s.title asc
	</sql>
	
	<select id="count" resultType="int" parameterType="map">
		select count(distinct s.id) from shop s 
		left join shoptype st on st.shopid = s.id
		left join type t on t.id = st.typeid
		<include refid="query_where" />
	</select>
	
	<select id="queryByPager" resultMap="shopRstMap" parameterType="map">
		select distinct
			s.id, s.title, s.keyword, s.description, '' contents,
			s.address, s.tel, s.contacter, s.imagePath, s.siteId,
			s.click, s.pingnum, s.isClosed, si.name siteName
		from shop s 
		join site si on si.id = s.siteId
		left join shoptype st on st.shopid = s.id
		left join type t on t.id = st.typeid
		<include refid="query_where" />
		<include refid="order"/>
		limit ${pager.startIndex}, ${pager.pageSize}
	</select>

	<select id="query" resultMap="shopRstMap" parameterType="map">
		SELECT s.*, si.name siteName FROM shop s
		join site si on si.id = s.siteId
		<include refid="query_where" />
		<include refid="order"/>
	</select>

	<select id="queryByShopId" resultMap="shopRstMap" parameterType="map">
		SELECT s.*, si.name siteName FROM shop s
		join site si on si.id = s.siteId
		where s.id = #{id}
	</select>
	
	<select id="querySuport" resultMap="shopRstMap" parameterType="map">
		SELECT s.*, si.name siteName FROM shop s
		join site si on si.id = s.siteId
		<include refid="query_where" />
		order by s.click desc
		<if test="top != null">limit ${top}</if>
	</select>
	
	<insert id="add" parameterType="shop">
		<selectKey resultType="java.lang.String" keyProperty="id" order="AFTER" >
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT INTO shop(
			title, keyword, description,
			contents, address, tel,
			contacter, imagePath, siteId,
			isClosed
		) VALUES (
			#{title}, #{keyword}, #{description},
			#{contents}, #{address}, #{tel},
			#{contacter}, #{imagePath}, #{siteId},
			#{isClosed}
		)
	</insert>
	
	<insert id="addTypes" parameterType="shop">
		INSERT INTO shoptype (
			shopId, typeId
		) VALUES 
		<foreach collection="types" item="type" index="index" separator=",">
		(
			#{id}, #{type.id}
		)
		</foreach>
	</insert>
	
	<update id="update" parameterType="shop">
		update shop set
			title = #{title},
			keyword = #{keyword},
			description = #{description},
			contents = #{contents},
			address = #{address},
			tel = #{tel},
			contacter = #{contacter},
			imagePath = #{imagePath},
			siteId = #{siteId},
			isClosed = #{isClosed}
			
			WHERE id = #{id}
	</update>
	
	<update id="updatePart" parameterType="shop">
		update shop
			<set>
				<if test="click != null">
					click = #{click},
				</if>
			</set>
			
			WHERE id = #{id}
	</update>
	
	<delete id="delete" parameterType="shop">
		delete from shop where id = #{id}
	</delete>
	
	<delete id="deleteTypes" parameterType="shop">
	delete from shoptype where shopId = #{id}
	</delete>
</mapper>